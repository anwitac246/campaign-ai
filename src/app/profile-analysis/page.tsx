'use client';

import React, { useState } from 'react';
import axios from 'axios';

interface VideoStats {
  viewCount: number;
  likeCount: number;
  commentCount: number;
}

interface VideoInfo {
  id: string;
  title: string;
  url: string;
  thumbnail: string;
  publishedAt: string;
  statistics: VideoStats;
}

interface Analysis {
  verdict: string;
  contentSummary: string;
  whyItWorked: string[];
  whyItFailed: string[];
  engagementAnalysis: string;
  audienceReaction: string;
  keyThemes: string[];
  improvements: string[];
  overallScore: number;
}

interface AnalysisResponse {
  video: VideoInfo;
  analysis: Analysis;
}

const API_URL = process.env.NEXT_PUBLIC_API_URL || 'http://localhost:3003/api';

export default function Home() {
  const [channelId, setChannelId] = useState('');
  const [loading, setLoading] = useState(false);
  const [result, setResult] = useState<AnalysisResponse | null>(null);
  const [error, setError] = useState('');

  const handleAnalyze = async () => {
    if (!channelId.trim()) {
      setError('Please enter a channel ID');
      return;
    }

    setLoading(true);
    setError('');
    setResult(null);

    try {
      const response = await axios.post(`${API_URL}/analyze`, { channelId });
      setResult(response.data);
    } catch (err: any) {
      setError(err.response?.data?.error || 'Analysis failed');
    } finally {
      setLoading(false);
    }
  };

  const downloadReport = () => {
    if (!result) return;

    const report = generateMarkdownReport(result);
    const blob = new Blob([report], { type: 'text/markdown' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `youtube-analysis-${result.video.id}.md`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  const generateMarkdownReport = (data: AnalysisResponse): string => {
    const { video, analysis } = data;
    const date = new Date().toLocaleDateString();
    
    return `# YouTube Content Analysis Report

## Video Information
- **Title:** ${video.title}
- **Video ID:** ${video.id}
- **URL:** ${video.url}
- **Analysis Date:** ${date}

## Statistics
- **Views:** ${formatNumber(video.statistics.viewCount)}
- **Likes:** ${formatNumber(video.statistics.likeCount)}
- **Comments:** ${formatNumber(video.statistics.commentCount)}
- **Engagement Rate:** ${calculateEngagementRate(video.statistics)}%

## Verdict: ${analysis.verdict}

**Overall Score:** ${analysis.overallScore}/100

### Content Summary
${analysis.contentSummary}

## Why It Worked
${analysis.whyItWorked.length > 0 ? analysis.whyItWorked.map((item, idx) => `${idx + 1}. ${item}`).join('\n') : 'N/A'}

## Why It Failed
${analysis.whyItFailed.length > 0 ? analysis.whyItFailed.map((item, idx) => `${idx + 1}. ${item}`).join('\n') : 'N/A'}

## Engagement Analysis
${analysis.engagementAnalysis}

## Audience Reaction
${analysis.audienceReaction}

## Key Themes
${analysis.keyThemes.map(theme => `- ${theme}`).join('\n')}

## Recommendations for Improvement
${analysis.improvements.map((item, idx) => `${idx + 1}. ${item}`).join('\n')}

---
*Report generated by YouTube Content Analyzer*
`;
  };

  const getVerdictColor = (verdict: string) => {
    switch (verdict) {
      case 'SUCCESS': return 'text-green-400 border-green-600';
      case 'FAILURE': return 'text-red-400 border-red-600';
      case 'MIXED': return 'text-yellow-400 border-yellow-600';
      default: return 'text-gray-400 border-gray-600';
    }
  };

  const formatNumber = (num: number) => {
    if (num >= 1000000) return (num / 1000000).toFixed(1) + 'M';
    if (num >= 1000) return (num / 1000).toFixed(1) + 'K';
    return num.toString();
  };

  const calculateEngagementRate = (stats: VideoStats) => {
    const total = stats.likeCount + stats.commentCount;
    return ((total / stats.viewCount) * 100).toFixed(2);
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-900 via-slate-800 to-slate-900 text-white">
      <div className="container mx-auto px-4 py-8 max-w-6xl">
        <header className="text-center mb-12">
          <h1 className="text-5xl font-bold mb-4">
            YouTube Content Analysis
          </h1>
          <p className="text-gray-400 text-lg">
            Discover why your last video succeeded or failed
          </p>
        </header>

        <div className="bg-slate-800 rounded-xl shadow-2xl p-8 mb-8 border border-slate-700">
          <label className="block text-sm font-medium mb-3 text-gray-300">
            YouTube Channel ID
          </label>
          <div className="flex gap-4">
            <input
              type="text"
              value={channelId}
              onChange={(e) => setChannelId(e.target.value)}
              placeholder="UCxxxxxxxxxxxxxxxxxxxxxx"
              className="flex-1 px-4 py-3 bg-slate-900 border border-slate-600 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent outline-none text-white"
              disabled={loading}
              onKeyPress={(e) => e.key === 'Enter' && handleAnalyze()}
            />
            <button
              onClick={handleAnalyze}
              disabled={loading}
              className="px-8 py-3 bg-blue-600 hover:bg-blue-700 disabled:bg-slate-600 disabled:cursor-not-allowed rounded-lg font-semibold transition-colors"
            >
              {loading ? 'Analyzing...' : 'Analyze'}
            </button>
          </div>
          {error && (
            <p className="mt-3 text-red-400 text-sm">{error}</p>
          )}
        </div>

        {loading && (
          <div className="text-center py-12">
            <div className="inline-block animate-spin rounded-full h-12 w-12 border-b-2 border-blue-500"></div>
            <p className="mt-4 text-gray-400">Analyzing your latest video...</p>
          </div>
        )}

        {result && (
          <div className="space-y-8">
            <div className="flex justify-end mb-4">
              <button
                onClick={downloadReport}
                className="px-6 py-2 bg-green-600 hover:bg-green-700 rounded-lg font-semibold transition-colors flex items-center gap-2"
              >
                <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                </svg>
                Download Report
              </button>
            </div>

            <div className="bg-slate-800 rounded-xl shadow-2xl p-8 border border-slate-700">
              <div className="flex gap-6 flex-col lg:flex-row">
                <img
                  src={result.video.thumbnail}
                  alt={result.video.title}
                  className="w-full lg:w-64 h-36 object-cover rounded-lg"
                />
                <div className="flex-1">
                  <h2 className="text-2xl font-bold mb-2">{result.video.title}</h2>
                  <a
                    href={result.video.url}
                    target="_blank"
                    rel="noopener noreferrer"
                    className="text-blue-400 hover:text-blue-300 text-sm mb-4 inline-block"
                  >
                    Watch Video
                  </a>
                  <div className="grid grid-cols-2 lg:grid-cols-4 gap-4 mt-4">
                    <div className="bg-slate-900 p-3 rounded-lg">
                      <div className="text-xs text-gray-400">Views</div>
                      <div className="text-xl font-bold">{formatNumber(result.video.statistics.viewCount)}</div>
                    </div>
                    <div className="bg-slate-900 p-3 rounded-lg">
                      <div className="text-xs text-gray-400">Likes</div>
                      <div className="text-xl font-bold">{formatNumber(result.video.statistics.likeCount)}</div>
                    </div>
                    <div className="bg-slate-900 p-3 rounded-lg">
                      <div className="text-xs text-gray-400">Comments</div>
                      <div className="text-xl font-bold">{formatNumber(result.video.statistics.commentCount)}</div>
                    </div>
                    <div className="bg-slate-900 p-3 rounded-lg">
                      <div className="text-xs text-gray-400">Engagement</div>
                      <div className="text-xl font-bold">{calculateEngagementRate(result.video.statistics)}%</div>
                    </div>
                  </div>
                </div>
              </div>
            </div>

            <div className={`bg-slate-800 rounded-xl shadow-2xl p-8 border-2 ${getVerdictColor(result.analysis.verdict)}`}>
              <div className="flex flex-col lg:flex-row items-start lg:items-center justify-between mb-4 gap-4">
                <h3 className="text-3xl font-bold">{result.analysis.verdict}</h3>
                <div className="text-left lg:text-right">
                  <div className="text-sm text-gray-400">Overall Score</div>
                  <div className="text-4xl font-bold">{result.analysis.overallScore}/100</div>
                </div>
              </div>
              <p className="text-gray-300 text-lg">{result.analysis.contentSummary}</p>
            </div>

            <div className="grid lg:grid-cols-2 gap-8">
              {result.analysis.whyItWorked.length > 0 && (
                <div className="bg-slate-800 rounded-xl shadow-2xl p-8 border border-slate-700">
                  <h3 className="text-xl font-bold mb-4 text-green-400">Why It Worked</h3>
                  <ul className="space-y-3">
                    {result.analysis.whyItWorked.map((reason, idx) => (
                      <li key={idx} className="flex gap-3">
                        <span className="text-green-400 mt-1">✓</span>
                        <span className="text-gray-300">{reason}</span>
                      </li>
                    ))}
                  </ul>
                </div>
              )}

              {result.analysis.whyItFailed.length > 0 && (
                <div className="bg-slate-800 rounded-xl shadow-2xl p-8 border border-slate-700">
                  <h3 className="text-xl font-bold mb-4 text-red-400">Why It Failed</h3>
                  <ul className="space-y-3">
                    {result.analysis.whyItFailed.map((reason, idx) => (
                      <li key={idx} className="flex gap-3">
                        <span className="text-red-400 mt-1">✗</span>
                        <span className="text-gray-300">{reason}</span>
                      </li>
                    ))}
                  </ul>
                </div>
              )}
            </div>

            <div className="bg-slate-800 rounded-xl shadow-2xl p-8 border border-slate-700">
              <h3 className="text-xl font-bold mb-4 text-blue-400">Engagement Analysis</h3>
              <p className="text-gray-300 leading-relaxed">{result.analysis.engagementAnalysis}</p>
            </div>

            <div className="bg-slate-800 rounded-xl shadow-2xl p-8 border border-slate-700">
              <h3 className="text-xl font-bold mb-4 text-purple-400">Audience Reaction</h3>
              <p className="text-gray-300 leading-relaxed">{result.analysis.audienceReaction}</p>
            </div>

            {result.analysis.keyThemes.length > 0 && (
              <div className="bg-slate-800 rounded-xl shadow-2xl p-8 border border-slate-700">
                <h3 className="text-xl font-bold mb-4 text-cyan-400">Key Themes</h3>
                <div className="flex flex-wrap gap-2">
                  {result.analysis.keyThemes.map((theme, idx) => (
                    <span
                      key={idx}
                      className="px-4 py-2 bg-slate-900 border border-cyan-600 rounded-full text-sm"
                    >
                      {theme}
                    </span>
                  ))}
                </div>
              </div>
            )}

            <div className="bg-gradient-to-r from-orange-900/30 to-yellow-900/30 rounded-xl shadow-2xl p-8 border border-orange-600">
              <h3 className="text-xl font-bold mb-4 text-orange-400">How to Improve Next Time</h3>
              <ul className="space-y-3">
                {result.analysis.improvements.map((improvement, idx) => (
                  <li key={idx} className="flex gap-3">
                    <span className="text-orange-400 font-bold">{idx + 1}.</span>
                    <span className="text-gray-300">{improvement}</span>
                  </li>
                ))}
              </ul>
            </div>
          </div>
        )}
      </div>
    </div>
  );
}